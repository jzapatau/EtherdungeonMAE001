package MAE1Project;

//------------------ IMPORT MODULES ---------------------------//

import java.util.ArrayList;
import java.util.Arrays;

/************************************************************/
/**
* @author Felix Zapata
* Date: 3/04/2019
* 
* Settings class is an auxiliary class during the program startup. It
* condenses the functionality required to start the program by defining the
* settings.
*/
public class Settings {
	
	// ------------------------ PROPERTIES ---------------------------------//
	
	/**
	 * numberOfMembersinTeam defines the amount of members in a team
	 */
	public final int numberOfMembersinTeam = 5;
	/**
	 * ui property helps the object interact with the user
	 */
	private UI ui;
	/**
	 * userHero is the user allocated to the Hero Team
	 */
	private User<Hero> userHero;
	/**
	 * userMonster is the user allocated to the Monster
	 */
	private User<Monster> userMonster;
	/**
	 * Player mode defines the mode, either single player or multi-player
	 * to be implemented in the game
	 */
	private PlayerCatalogue playerMode;
	
	//---------------------------- METHODS --------------------------------//
	
	/**
	 * Class default constructor
	 */
	public Settings() {
		// Set the properties
		this.setUi(UI.INSTANCE);
		
		// Call the different methods that are required for the settings
		this.definePlayerMode();
		this.defineUsers();
	}
	
	/**
	 * definePlayerMode asks the user which player mode wants to utilize
	 */
	public void definePlayerMode() {
		// Assemble string to output
		String out = "\n -------------------------------------------------------\n";
		out += String.format("\n.. Select Player Mode:\n\t %s", PlayerCatalogue.tostring());
		this.ui.printToScreen(out);
		
		// TODO: implement error checking for type coming from 
		// Collect user input on the matter
		String inVal = ui.inputScreen();
		int input = Integer.parseInt(inVal);
		
		// Set the playerMode property
		playerMode = PlayerCatalogue.returnMode(input);
	}
	
	/**
	 * defineUsers creates the users in the Settings obj.
	 */
	public void defineUsers() {		
		// There are two players max
		ArrayList<CharacterCatalogue> values = new ArrayList<CharacterCatalogue>(Arrays.asList(CharacterCatalogue.values()));
		for (int i=0; i < 2; i++) {
			if (i < playerMode.getNumberOfPlayers()) {
				// Generate the user by input
				generateUser(values, i);
			}
				// Generate the virtual user
				generateVirtualUser(values, i);
		}
	}
	
	/**
	 * generateUser generates a new user by input.
	 * @param vals: values of CharacterCatalogue available
	 * @param userNum: number of the user inputed.
	 */
	private void generateUser(ArrayList<CharacterCatalogue> vals, int userNum){
		// Ask the User for name and team
		String teamString = "";
		for (int i=0; i < vals.size(); i++) {
			teamString += String.format("%s : %d \t", vals.get(i), i);
		}
		
		// Assemble userNameRequest and print to screen
		String userNameRequest =  "\n -------------------------------------------------------\n";
		userNameRequest += String.format(".. Introduce separated by comas User: %s name and Team: %s \n", userNum, teamString);
		ui.printToScreen(userNameRequest);
		
		// TODO: implement error checking for type coming from and also String size
		// Collect user input on the matter
		String inVal = ui.inputScreen();
		String[] inVals = inVal.split(",", 2);
		String userName = inVals[0];
		int teamVal = Integer.parseInt(inVals[1]);
		
		// Generate the user 
		// TODO: Check for index out of bounds exception
		vals.get(teamVal).generateUser(this, userName);
		
		// Remove the value from vals so that the team is not repeated
		vals.remove(teamVal);
	}
	
	/**
	 * generateVirtualUser generates a virtual user when commanded (SinglePlayer mode);
	 * @param vals: values of CharacterCatalogue available
 	 * @param userNum: number of the user inputed.
	 */
	private void generateVirtualUser(ArrayList<CharacterCatalogue> vals, int userNum) {
		// Create virtual user
		// TODO: check this implementation is correct
		vals.get(0).generateVirtualUser(this, "User" + userNum);
		
	}
	
	public void repopulateUserHero() {
		// Repopulate
	}
	
	// ----------------------------- GETTERS AND SETTERS ----------------------------

	public UI getUi() {
		return ui;
	}

	public void setUi(UI ui) {
		this.ui = ui;
	}

	public User<Hero> getUserHero() {
		return userHero;
	}

	public void setUserHero(User<Hero> userHero) {
		this.userHero = userHero;
	}

	public User<Monster> getUserMonster() {
		return userMonster;
	}

	public void setUserMonster(User<Monster> userMonster) {
		this.userMonster = userMonster;
	}

	public PlayerCatalogue getPlayerMode() {
		return playerMode;
	}

	public void setPlayerMode(PlayerCatalogue playerMode) {
		this.playerMode = playerMode;
	}
	
	

}
