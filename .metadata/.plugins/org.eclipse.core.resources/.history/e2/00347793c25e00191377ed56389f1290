// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package MAE1Project;

/************************************************************/
/**
 * @author Felix Zapata
 * Date: 13/04/2019
 * 
 * Duelist class constitutes the 8th of the concrete classes that
 * derive from Hero. The characteristics of Duelist are:
 * 1. Attack: Above average - attacks twice
 * (Instead of attacking once and ending its turn,
 *  the Duelist attack a first target, then a second,
 *  then the turn is over)
 * 2. MaxHealthPoints: medium
 * 
 */
public class Duelist extends Hero {
	
	// -------------------------- METHODS --------------------------------/
	
	/**
	 * Class constructor 1
	 */
	public Duelist(String name) {
		// Define the inputs for the superclass
		super("Duelist", name, 50, 67);
		
		// Define the action and set it
		Action myAction = new Attack(this);
		
		// Set action
		this.setMyAction(myAction);
	}

	@Override
	public void performAction(Individual victim) {
		// Perform the action of the Duelist
		
		// The Duelist simply decreases the health of its victim by a parameter
		// given on the performance.
		
		// Re-adapt the health of the victim
		float victimLastHealth = victim.getLastHealth();
		
		// Compute new health
		victimLastHealth =- this.getPerformance();
		
		// Set the new health as the victims lastHealth
		victim.setLastHealth(victimLastHealth);
			
	}

	@Override
	public void retaliate(Individual offender) {
		// Do nothing
	}

	@Override
	public <T extends Individual, Q extends Individual> void performAction(Team<T> mates, Team<Q> victims,
			boolean userInput) {
		//  performAction in class Duelist will perform 2 (two) attacks on its opponent
		//
		
		// Initialize myVictim
		Q myFirstVictim = null;
		Q mySecondVictim = null;
		
		// Print the message of draft with Action name
		String out = String.format("Who will be %s first?", this.getMyAction().getName());
		ui.printToScreen(out);
		
		// Draft the victim based on the userInput boolean
		if (userInput) {
			// If userInput boolean is True then proceed to draft, otherwise
			myFirstVictim = victims.draftByInput(ui);
		}
		else {
			// Perform a random draft on the victim
			myFirstVictim = victims.draftRandomly(ui);
		}
		
		// Execute the action over the victim
		this.getMyAction().execute(myFirstVictim);	
		
		// Print the message of draft with Action name
		out = String.format("Who will be %s second?", this.getMyAction().getName());
		ui.printToScreen(out);
		
		// Draft the victim based on the userInput boolean
		if (userInput) {
			// If userInput boolean is True then proceed to draft, otherwise
			mySecondVictim = victims.draftByInput(ui);
		}
		else {
			// Perform a random draft on the victim
			mySecondVictim = victims.draftRandomly(ui);
		}
		
		// Execute the action over the victim
		this.getMyAction().execute(mySecondVictim);
	}

	@Override
	public boolean willDodgeAttack() {
		return false;
	}

	@Override
	public String returnClassName() {
		return "DUELIST";
	}


}
