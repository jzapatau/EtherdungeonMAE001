// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package MAE1Project;

//------------------ IMPORT MODULES ---------------------------//

//No modules to import

/************************************************************/
/**
 * @author Felix Zapata
 * Date: 3/04/2019
 * 
 * Class Turn is in charge of commanding the dynamics of
 * a Turn assigned to any of the two teams. It is a Java Generics
 * class which has as type variable any descendant of Individual
 */
public class Turn<T extends Individual, Q extends Individual> {
	
	// ------------------ PROPERTIES ------------------------ //
	
	/**
	 * teamA property stores the team from which the owner shall be picked
	 */
	private Team<T> teamA;
	
	/**
	 * teamB property stores the opposing team
	 */
	private Team<Q> teamB;
	
	/**
	 * owner is the member of teamA who owns the encounter
	 */
	private T owner;
	
	/**
	 * ui property stores the UI singleton
	 */
	private UI ui;
	
	//----------------------- METHODS ---------------------------//
	
	/**
	 * Class constructor
	 * @param teamA: Team of type T which extends individual
	 * @param teamB: Team of type Q which extends individual
	 * @param userInput: boolean which defines if required user input or automatic draft
	 */
	public Turn(Team<T> teamA, Team<Q> teamB, boolean userInput){
		// Set properties
		this.setTeamA(teamA);
		this.setTeamB(teamB);
		this.setUi(UI.INSTANCE);
		
		// Perform the owner selection by deciding on the userInput variable
		if (userInput) {
			
			// Run an infinite loop until an enabled owner is picked
			while (true) {
				
				// Get an owner
				T myOwner = teamA.draftByInput(ui);
				
				// Check if it is enabled
				if (myOwner.getLastEnabled()) {
					
					// Set the owner on the object
					this.setOwner(myOwner);
					
					// Break the infinite loop
					break;
				}
				else {
					
					// Print the message to screen telling to pick a proper owner
					ui.printToScreen("\n------------- Please Select an Enabled Owner \n -----------");
				}
			}
		}
		
		else{
			// Draft randomly
			this.setOwner(teamA.draftMember());	
		}
	}
	
	/**
	 * Class constructor 2
	 * @param owner: represents the entity (Individual) who owns the turn and who is
	 * going to perform its action over a team-mate or an opponent
	 * @param temaA : Team instance associated to the owner. Has to be of same type
	 * of the owner
	 * @param teamB: Team instance associated to the opponents. 
	 */
	public Turn(T owner, Team<T> teamA, Team<Q> teamB) {
		// Set properties
		this.setOwner(owner);
		this.setTeamA(teamA);
		this.setTeamB(teamB);
		this.setUi(UI.INSTANCE);
	}
	
	/**
	 * runTurn method executes the specified turn over the owner
	 * @param userInput: boolean defining if the action will involve a user input
	 */
	public void runTurn(boolean userInput) {
		// Call the performAction method of the owner.
		owner.performAction(teamA, teamB, userInput);
	}
		
	
	/***************** GETTERS AND SETTERS ******************/
	
	public Team<T> getTeamA() {
		return teamA;
	}

	public void setTeamA(Team<T> teamA) {
		this.teamA = teamA;
	}

	public Team<Q> getTeamB() {
		return teamB;
	}

	public void setTeamB(Team<Q> teamB) {
		this.teamB = teamB;
	}

	public T getOwner() {
		return owner;
	}

	public void setOwner(T owner) {
		this.owner = owner;
	}

	public UI getUi() {
		return ui;
	}

	public void setUi(UI ui) {
		this.ui = ui;
	}
	
};
