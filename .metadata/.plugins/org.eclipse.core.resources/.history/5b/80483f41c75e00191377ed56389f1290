// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package MAE1Project;

import java.util.ArrayList;

/************************************************************/
/**
 * @author Felix Zapata
 * Date: 14/04/2019
 * 
 * Mummy class constitutes the second of the concrete classes that
 * derive from Monster. The characteristics of a Mummy are:
 * 1. Attack: High (only attacks every two turns)
 * 2. MaxHealthPoints: Medium
 * 
 */
public class Mummy extends Monster {

	// -------------------------- METHODS --------------------------------/
	
	/**
	 * Class constructor 1
	 */
	public Mummy(String name) {
		// Define the inputs for the superclass
		super("Mummy", name, 75, 50);
		
		// Define the action and set it
		Action myAction = new Attack(this);
		
		// Set action
		this.setMyAction(myAction);
	}

	@Override
	public void performAction(Individual victim) {
		// Mummy performs a regular attack on its victim of type
		// Hero with the difference that it is disabled to attack in the following turn
		// but in the next it'll be ok to attack.
		
		// The Mummy simply decreases the health of its victim by a parameter
		// given on the performance.
		
		// Re-adapt the health of the victim
		float victimLastHealth = victim.getLastHealth();
		
		// Compute new health
		victimLastHealth -= this.getPerformance();
		
		// Set the new health as the victims lastHealth
		victim.setLastHealth(victimLastHealth);
		
		// Now disable the object for the next turn
		int nextTurnNum = this.getClock().getTurnNum() + 1;
		
		// Get the isEnabled ArrayList of the object and update it
		ArrayList<Boolean> isEnabled = this.getIsEnabled();
		
		// TODO: Implement IndexOutOfBoundsException, CHECK THAT THE ASSIGNMENT
		// IS CORRECT;
		if (nextTurnNum < isEnabled.size()) {
			// Set false to the value assigned to the next Turn
			isEnabled.set(nextTurnNum, false);
		}
		else {
			// Add a new record for the next turn which says isEnabled is false;
			isEnabled.add(false);
		}
		
		// TODO: Implement IndexOutOfBoundsException, CHECK THAT THE ASSIGNMENT
		// IS CORRECT;
		if (nextTurnNum + 1 < isEnabled.size()) {
			// Set the true value to the value assigned to the turn that comes after
			// nextTurnNum
			isEnabled.set(nextTurnNum + 1, true);
		}
		else {
			// Add a new record for the turn that comes after the next turn which says
			// isEnabled is true;
			isEnabled.add(true);
		}
	}

	@Override
	public <T extends Individual, Q extends Individual> void performAction(Team<T> mates, Team<Q> victims,
			boolean userInput) {
		//  performAction in class Mummy will simply do a regular attack over an opponent,
		// so the targetTeam in this particular case will be victims of type Hero!
		
		// Initialize myVictim
		Q myVictim = null;
		
		// Print the message of draft with Action name
		String out = String.format("Who will be %s ?", this.getMyAction().getName());
		ui.printToScreen(out);
		
		// Draft the victim based on the userInput boolean
		if (userInput) {
			// If userInput boolean is True then proceed to draft, otherwise
			myVictim = victims.draftByInput(ui);
		}
		else {
			// Perform a random draft on the victim
			myVictim = victims.draftRandomly(ui);
		}
		
		// Execute the action over the victim
		this.getMyAction().execute(myVictim);
		
	}

	@Override
	public boolean willDodgeAttack() {
		return false;
	}

	@Override
	public String returnClassName() {
		return "MUMMY";
	}

	@Override
	public void retaliate(Individual offender) {
		// Do nothing
	}
};
